services:
  # Laravel Application Container
  app:
    build:
      context: .
      dockerfile: docker/app/Dockerfile
    container_name: jewelry_app
    restart: unless-stopped
    working_dir: /var/www
    volumes:
      - ./:/var/www
      - ./docker/app/local.ini:/usr/local/etc/php/conf.d/local.ini
      # Persistent storage volumes
      - app_storage:/var/www/storage
      - app_logs:/var/www/storage/logs
      - app_cache:/var/www/bootstrap/cache
      - category_images:/var/www/storage/app/public/categories
      - category_thumbnails:/var/www/storage/app/public/categories/thumbnails
      - category_backups:/var/www/storage/backups/categories
      - invoice_files:/var/www/storage/app/invoices
      - backup_data:/var/www/backups
    networks:
      - jewelry_network
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - CATEGORY_IMAGE_MAX_SIZE=5120
      - CATEGORY_IMAGE_QUALITY=85
      - CATEGORY_THUMBNAIL_SIZE=150
      - GD_EXTENSION_ENABLED=1
      - CATEGORY_BACKUP_RETENTION_DAYS=30
    healthcheck:
      test: ["CMD", "php", "artisan", "tinker", "--execute=echo 'healthy';"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Vue.js Frontend Container
  frontend:
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile
    container_name: jewelry_frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - jewelry_network
    environment:
      - CHOKIDAR_USEPOLLING=true

  # MySQL Database Container with Optimization
  mysql:
    image: mysql:8.0
    container_name: jewelry_mysql
    restart: unless-stopped
    ports:
      - "3306:3306"
    environment:
      MYSQL_DATABASE: jewelry_platform
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_USER: jewelry_user
      MYSQL_PASSWORD: jewelry_password
      MYSQL_ROOT_HOST: "%"
    volumes:
      - mysql_data:/var/lib/mysql
      - mysql_logs:/var/log/mysql
      - ./docker/mysql/my.cnf:/etc/mysql/my.cnf
      - ./docker/mysql/conf.d:/etc/mysql/conf.d
      - backup_data:/backups
    networks:
      - jewelry_network
    command: --default-authentication-plugin=mysql_native_password --innodb-buffer-pool-size=256M --innodb-log-file-size=64M --innodb-flush-log-at-trx-commit=2 --max-connections=100
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proot_password"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Redis Cache Container with Persistence
  redis:
    image: redis:7-alpine
    container_name: jewelry_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - redis_logs:/var/log/redis
    networks:
      - jewelry_network
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru --save 900 1 --save 300 10 --save 60 10000
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Nginx Reverse Proxy
  nginx:
    build:
      context: .
      dockerfile: docker/nginx/Dockerfile
    container_name: jewelry_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./:/var/www
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/sites/:/etc/nginx/sites-available/
      - ./docker/nginx/ssl/:/etc/nginx/ssl/
      - nginx_logs:/var/log/nginx
      - category_images:/var/www/storage/app/public/categories
      - category_thumbnails:/var/www/storage/app/public/categories/thumbnails
      - invoice_files:/var/www/storage/app/invoices
      - app_storage:/var/www/storage
    networks:
      - jewelry_network
    depends_on:
      - app
      - frontend

  # Laravel Scheduler Container
  scheduler:
    build:
      context: .
      dockerfile: docker/app/Dockerfile
    container_name: jewelry_scheduler
    restart: unless-stopped
    working_dir: /var/www
    volumes:
      - ./:/var/www
      - app_storage:/var/www/storage
      - app_logs:/var/www/storage/logs
      - category_images:/var/www/storage/app/public/categories
      - category_thumbnails:/var/www/storage/app/public/categories/thumbnails
      - category_backups:/var/www/storage/backups/categories
      - invoice_files:/var/www/storage/app/invoices
      - backup_data:/var/www/backups
    networks:
      - jewelry_network
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: php artisan schedule:work

  # Laravel Queue Worker Container
  queue:
    build:
      context: .
      dockerfile: docker/app/Dockerfile
    container_name: jewelry_queue
    restart: unless-stopped
    working_dir: /var/www
    volumes:
      - ./:/var/www
      - app_storage:/var/www/storage
      - app_logs:/var/www/storage/logs
      - category_images:/var/www/storage/app/public/categories
      - category_thumbnails:/var/www/storage/app/public/categories/thumbnails
      - category_backups:/var/www/storage/backups/categories
      - invoice_files:/var/www/storage/app/invoices
      - backup_data:/var/www/backups
    networks:
      - jewelry_network
    depends_on:
      app:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: php artisan queue:work --verbose --tries=3 --timeout=90

  # Category System Initialization
  category_init:
    build:
      context: .
      dockerfile: docker/app/Dockerfile
    container_name: jewelry_category_init
    working_dir: /var/www
    volumes:
      - ./:/var/www
      - app_storage:/var/www/storage
      - category_images:/var/www/storage/app/public/categories
      - category_thumbnails:/var/www/storage/app/public/categories/thumbnails
      - category_backups:/var/www/storage/backups/categories
      - backup_data:/var/www/backups
    networks:
      - jewelry_network
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: bash /var/www/docker/scripts/init-categories.sh
    restart: "no"

  # Automated Backup Service
  backup:
    build:
      context: .
      dockerfile: docker/app/Dockerfile
    container_name: jewelry_backup
    restart: unless-stopped
    working_dir: /var/www
    volumes:
      - ./:/var/www
      - mysql_data:/var/lib/mysql:ro
      - redis_data:/data:ro
      - app_storage:/var/www/storage:ro
      - backup_data:/var/www/backups
    networks:
      - jewelry_network
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - BACKUP_SCHEDULE=0 2 * * *
      - BACKUP_RETENTION_DAYS=30
      - DB_HOST=mysql
      - DB_DATABASE=jewelry_platform
      - DB_USERNAME=jewelry_user
      - DB_PASSWORD=jewelry_password
    command: >
      bash -c "
      apt-get update && apt-get install -y mysql-client redis-tools cron &&
      echo '0 2 * * * /var/www/docker/scripts/backup.sh >> /var/log/backup.log 2>&1' | crontab - &&
      cron &&
      /var/www/docker/scripts/backup.sh &&
      tail -f /var/log/backup.log
      "

networks:
  jewelry_network:
    driver: bridge

volumes:
  # Database persistent volumes (Docker-managed for better compatibility)
  mysql_data:
    driver: local
  mysql_logs:
    driver: local
  
  # Redis persistent volumes
  redis_data:
    driver: local
  redis_logs:
    driver: local
  
  # Application storage volumes
  app_storage:
    driver: local
  app_logs:
    driver: local
  app_cache:
    driver: local
  
  # File storage volumes
  category_images:
    driver: local
  category_thumbnails:
    driver: local
  category_backups:
    driver: local
  invoice_files:
    driver: local
  
  # Backup volumes
  backup_data:
    driver: local
  
  # Nginx logs
  nginx_logs:
    driver: local